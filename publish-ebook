#!/bin/bash
################################################################################
# EPUB and MOBI publish script
# 
# MIT License
# 
# Copyright (c) 2016 Mukli KrisztiÃ¡n
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
################################################################################
# EPUB and MOBI publish script
# v1.0.0 - 2016-09-12
################################################################################
# Changelog
#
# v1.0.0 - 2016-09-09
# * First version of script
#
################################################################################

#######################################
# Hungarian localization
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
localization_hu() {
# main
  localization_en
}

#######################################
# English localization
# Globals:
#   msg_MissingParameter
#   msg_InvalidParameter
#   msg_Help
# Arguments:
#   None
# Returns:
#   None
#######################################
localization_en() {
# main

# check_parameters
msg_MissingParameter="Missing parameters, use 'publish --help' for usage"
msg_InvalidParameter="Invalid parameters, use 'publish --help' for usage"
# help
msg_Help="Usage:\n
publish-ebook [SWITCHES] BOOK [INPUT] [OUTPUT]\n
Available switches:\n
\t-e2|--epub2: create EPUB2 file\n
\t-e3|--epub3: create EPUB3 file\n
\t-h | --help: displaying help\n
\t-l | --license: displaying license\n
\t-m |--mobi: create MOBI file\n
\t-o | --optimalize: using some optimalization techniques for smaller filesize\n
\t--version: displaying version information\n
\t-v | --verbose: verbose output\n
\n
BOOK: Title of book and name of ebook-file\n
INPUT: Input folder, if not specified, script search for book title\n
OUTPUT: Output folder, if not specified, script uses actual folder\n
\n
Script create EPUB file with the specified book-title as filename from content\n
of the specified folder. If no given folder, script will use folder called as 
book-title (if exists).\n"
# optimize
msg_NoYuicompressor="Please install yuicompressor or make sure it is in your
 path! Use ./install-tools command for install every dependencies!"
# create_epub
msg_InputNotOK="Input folder doesn't exists!"
msg_NoEpubCheck="Please install epubcheck or make sure it is in your
 path! Use ./install-tools command for install every dependencies!"
# create_mobi
msg_NoKindlegen="Please install kindlegen or make sure it is in your
 path! Use ./install-tools command for install every dependencies!"
}

#######################################
# Check and decide which language use
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
set_localization(){
case $LANG in
  # Hungarian localization 
  hu_HU|hu_HU.UTF-8) localization_hu ;;
  # English localization
  *) localization_en ;;
esac
}

#######################################
# Initialize variables
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
initialize_variables() {
# Parameters
EPUB2=false
EPUB3=false
MOBI=false
OPTIMIZE=false
VERBOSE=false
BOOK=""
INPUT=""
OUTPUT=""

# Global variables
FILE=""
TEMP=""
LOCAL="$(pwd)"
}

#######################################
# Usage of script
# Globals:
#   msg_Help
# Arguments:
#   None
# Returns:
#   None
#######################################
help() {
echo -e $msg_Help
exit 0
}

#######################################
# Displaying license information
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
# License information
license_information() {
sed -n 3,25p $0 | sed 's/# //g' | sed 's/#//g'
exit 0
}

#######################################
# Displaying version information
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
version_information() {
sed -n 27,28p $0 | sed 's/# //g'
exit 0
}

#######################################
# Error function
# Globals:
#   None
# Arguments:
#   Error message
# Returns:
#   None
#######################################
error(){
echo -e "$@"
exit 1
}

#######################################
# Check parameters and running non-module methods
# Globals:
#   None
# Arguments:
#   Switches of the script
# Returns:
#   None
#######################################
check_parameters() {
case $# in
  0) error $msg_MissingParameter ;;
  1) 
    case "${1,,}" in
      -h|--help) help ;;
      -l|--license) license_information ;;
      --version) version_information ;;
      *) error $msg_MissingParameter ;;
    esac
  ;;
  *)
    for var in "$@" ; do
      case ${var,,} in
        -e2|--epub2) EPUB2=true ;;
        -e3|--epub3) EPUB3=true ;;
        -m|--mobi) MOBI=true ;;              
        -o|--optimize) OPTIMIZE=true ;;
        -v|--verbose) VERBOSE=true ;;
        *)          
          if [[ -z "${BOOK// }" ]] ; then 
            BOOK="${var%/}";
          elif [[ -z "${INPUT// }" ]] ; then 
            INPUT="${var%/}";            
          elif [[ -z "${OUTPUT// }" ]] ; then 
            OUTPUT="${var%/}"
          else 
            error $msg_InvalidParameter
          fi
        ;;
      esac
    done
  ;;
esac

if ! $EPUB2 && ! $EPUB3 && ! $MOBI ; then EPUB2=true; fi;

if [[ -z "${INPUT// }" ]] ; then INPUT="$BOOK" ; fi
if [[ ! -e $INPUT ]] ; then echo -e $msg_InputNotOK; exit -1 ; fi

if [[ -z "${OUTPUT// }" ]] ; then OUTPUT="$LOCAL" ; fi
if [[ ! -e $OUTPUT ]] ; then mkdir -p $OUTPUT ; fi

FILE="$OUTPUT/$BOOK"
}

#######################################
# Check dependencies and if not installed, installing them
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
check_dependencies(){
# yuicompressor
if [[ ! -e "$LOCAL/tools/yuicompressor/yuicompressor.jar" ]]\
 && [[ ! -e /opt/yuicompressor/yuicompressor.jar ]] ; then
  echo -e $msg_NoYuicompressor
fi

# epubcheck
if [[ ! -e "$LOCAL/tools/epubcheck/epubcheck.jar" ]]\
 && [[ ! -e /opt/epubcheck/epubcheck.jar ]]\
 && ! which epubcheck > /dev/null ; then
  echo -e $msg_NoEpubCheck
fi

# kindlegen
if [[ ! -e "$LOCAL/tools/kindlegen/kindlegen" ]]\
 && [[ ! -e /opt/kindlegen/kindlegen ]] ; then
  echo -e $msg_NoKindlegen;
fi

}

#######################################
# Write to log file
# Globals:
#   FILE
# Arguments:
#   message to log
# Returns:
#   None
#######################################
log() {
# If there are parameters read from parameters
if [ $# -gt 0 ]; then
  if $VERBOSE ; then echo $@ ; fi
  echo -e `date +%Y-%m-%d\ %H:%M:%S` $@  | tee -a "$FILE.log" >> /dev/null
else
	# If there are no parameters read from stdin
  while read data ; do
    if $VERBOSE ; then echo $data ; fi
	  echo -e `date +%Y-%m-%d\ %H:%M:%S` $data | tee -a "$FILE.log" >> /dev/null
  done	
fi
}

#######################################
# Clean old files
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
clean(){
[[ -e "$1" ]] && rm -rf "$1" 2>&1 | log 
}

#######################################
# Create temp folder and files
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
create_temp(){
TEMP=$(mktemp -d)
cp -Rp "$INPUT/." "$TEMP" 2>&1 | log
}

#######################################
# Create EPUB2 file
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
create_epub2(){
cd "$TEMP"
zip -q0X "$1" mimetype 2>&1 | log 
zip -qXr9D "$1" * -x "*.svn*" -x "*~" -x "*.hg*" -x "*.swp" -x "*.DS_Store" 2>&1 | log
}

#######################################
# Validating EPUB2 file
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
check_epub(){
if [[ -e "$LOCAL/tools/epubcheck/epubcheck.jar" ]] ; then
  java -jar "$LOCAL/tools/epubcheck/epubcheck.jar" "$1" 2>&1 | log
elif [[ -e /opt/epubcheck/epubcheck.jar ]] ; then
  java -jar "/opt/epubcheck/epubcheck.jar" "$1" 2>&1 | log
elif which epubcheck > /dev/null ; then
  epubcheck "$1" 2>&1 | log
else
  $VERBOSE || echo -e $msg_NoEpubCheck && log $msg_NoEpubCheck
  return -1
fi
}

#######################################
# Prepare data to MOBI file creation
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
prepare_mobi(){
# content.opf
sed -i '/itemref idref="cover"/ d' "$TEMP/OEBPS/content.opf"
sed -i '/.*type="cover".*/ d' "$TEMP/OEBPS/content.opf"
# toc.ncx
sed -i '/navPoint id="navpoint1" playOrder="1"/,/\/navPoint/ d' "$TEMP/OEBPS/toc.ncx"
sed -i -r 's/(.*id=)(.*)( playOrder=")([0-9]+)(.*)/echo "\1\\"\2\\"\3\\"$((\4-1))\\"\5"/ge' "$TEMP/OEBPS/toc.ncx"
#TODO:Flattening multilevel table of contents in `toc.ncx` file
# xhtml files
find "$TEMP/OEBPS/Text" -type f -print0 | xargs -0 sed -i -r 's/(<acronym.*>)(.*)(<\/acronym>)/\2/g'
find "$TEMP/OEBPS/Text" -type f -print0 | xargs -0 sed -i -r 's/(<abbr.*>)(.*)(<\/abbr>)/\2/g'
find "$TEMP/OEBPS/Text" -type f -print0 | xargs -0 sed -i -r 's/(<bdo.*>)(.*)(<\/bdo>)/\2/g'

}
#######################################
convert_to_mobi(){
if [[ -e "$LOCAL/tools/kindlegen/kindlegen" ]] ; then
  "$LOCAL/tools/kindlegen/kindlegen" "$1" -c2 -verbose -o "$BOOK.mobi" 2>&1 | log
elif [[ -e /opt/kindlegen/kindlegen ]] ; then
  /opt/kindlegen/kindlegen "$1" -c2 -verbose -o "$BOOK.mobi" 2>&1 | log
else
  $VERBOSE || echo -e $msg_NoKindlegen && log $msg_NoKindlegen
  return -1
fi
}

#######################################
# Generate EPUB2 file
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
generate_epub2(){
# start message
$VERBOSE || echo -n "Generate EPUB2... " && log "Generate EPUB2..."

# preparing
clean "$FILE.epub"
create_temp

# optimizing
$OPTIMIZE && optimize

# creation
create_epub2 "$FILE.epub"

# checking
check_epub "$FILE.epub"

# delete temp
clean "$TEMP"

# end message
$VERBOSE || echo "COMPLETED" && log "Generate EPUB2... COMPLETED"
}

#######################################
# Generate EPUB3 file
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
generate_epub3(){
# TODO: generate_epub3
return 0;
}

#######################################
# Generate MOBI file
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
generate_mobi(){
# start message
$VERBOSE || echo -n "Generate MOBI... " && log "Generate MOBI..."

# preparing
clean "$FILE.tmp.epub"
create_temp
prepare_mobi

# optimizing
$OPTIMIZE && optimize

# creation
create_epub2 "$FILE.tmp.epub"

# checking
check_epub "$FILE.tmp.epub"

# conversion
convert_to_mobi "$FILE.tmp.epub"

# delete temp
#clean "$TEMP"
#clean "$FILE.tmp.epub"

# end message
$VERBOSE || echo "COMPLETED" && log "Generate MOBI... COMPLETED"
}

#######################################
# Main function of script
# Globals:
#   None
# Arguments:
#   Switches of the script
# Returns:
#   None
#######################################
set_localization
initialize_variables
check_parameters "$@"
check_dependencies

if $EPUB2 ; then generate_epub2 ; fi
if $EPUB3 ; then generate_epub3 ; fi
if $MOBI ; then generate_mobi ; fi
