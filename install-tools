#!/bin/bash
################################################################################
# Install script for tools using by Epub Boilerplate
# 
# MIT License
# 
# Copyright (c) 2016 Mukli Krisztián
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
################################################################################
# install-tools
# v1.2.0 - 2016-09-16
################################################################################
# Changelog
# 
# v2.0.0 - 2016-10-05
# * FIXED: If no installed curl, -h or --help switches doesn't work, instead of 
#writing the missing curl message to terminal.
# * Check and install dependencies in a better way
# * Does not support local install 
#
# v1.2.0 - 2016-09-16
# * set_localization function
# * check_dependencies function
# * modified confirm function
#
# v1.1.2 - 2016-09-13
# * Fix some typo in messages
# * yuicompressor*.jar file renaming to yuicompressor.jar when installing
#
# v1.0.1 - 2016-09-11
# * Local install path move to tools folder
#
# v1.0.0 - 2016-09-09
# * First version of script
#
# v0.0.1 - 2016-09-07
# * Base structure of script
################################################################################

#######################################
# Hungarian localization
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
localization_hu() {
# main
msg_RunAsRoot="A rendszerszintű telepítéshez sudo-val kell futtatni ezt a 
szkriptet!"
# check_parameters
msg_InvalidParameter="Érvénytelen paraméter, használja a 'install-tools --help' 
parancsot a segítséghez!"
# help
msg_Help="Használat:\n
[sudo] install-tools [KAPCSOLÓK]\n
Elérhető kapcsolók:\n
\t-l | --license: licensz megjelenítése\n
\t-h | --help: súgó megjelenítése\n
\t-v | --verbose: részletes kimenet\n
\t--version: verzióinformácó megjelenítése\n"
# install_epubcheck
msg_install_epubcheck_Confirm="Szeretné az epubcheck csomagot a disztribúció 
csomagtárolójából telepíteni? Ha a NEM-et választja, az upstream verzió kerül 
telepítésre."
msg_epubcheck_OK="EpubCheck telepítése... RENDBEN"
msg_epubcheck_FAILED="EpubCheck telepítése... SIKERTELEN"
# install_kindlegen
msg_kindlegen_OK="Kindlegen telepítése... RENDBEN"
msg_kindlegen_FAILED="Kindlegen telepítése... SIKERTELEN"
# install yuicompressor
msg_yuicompressor_OK="Yuicompressor telepítése... RENDBEN"
msg_yuicompressor_FAILED="Yuicompressor telepítése... SIKERTELEN"
# install_prettyxml
msg_prettyxml_OK="Pretty-XML telepítése... RENDBEN"
msg_prettyxml_FAIL="Pretty-XML telepítése... SIKERTELEN"
}

#######################################
# English localization
# Globals:
#   msg_RunAsRoot
#   msg_InvalidParameter
#   msg_Help
#   msg_install_epubcheck_Confirm
#   msg_epubcheck_OK
#   msg_epubcheck_FAILED
#   msg_kindlegen_OK
#   msg_epubcheck_FAILED
#   msg_yuicompressor_OK
#   msg_yuicompressor_FAILED
# Arguments:
#   None
# Returns:
#   None
#######################################
localization_en() {
# main
msg_RunAsRoot="This script must be run as root for system-wide installation"
# check_parameters
msg_InvalidParameter="Invalid parameters, use 'install-tools --help' 
for usage"
# help
msg_Help="Usage:\n
[sudo] install-tools [SWITCHES]\n
Available switches:\n
\t-l | --license: displaying license\n
\t-h | --help: Displaying help\n
\t-v | --verbose: Verbose output\n
\t--version: Displaying version information\n"
# install_epubcheck
msg_install_epubcheck_Confirm="Would you like to install epubheck from
distribution repository? If you choose 'NO', install upstream version."
msg_epubcheck_OK="Install EpubCheck... OK"
msg_epubcheck_FAILED="Install EpubCheck... FAILED"
# install_kindlegen
msg_kindlegen_OK="Install kindlegen... OK"
msg_kindlegen_FAILED="Install kindlegen... FAILED"
# install yuicompressor
msg_yuicompressor_OK="Install yuicompressor... OK"
msg_yuicompressor_FAILED="Install yuicompressor... FAILED"
# install_prettyxml
msg_prettyxml_OK="Install pretty-xml... OK"
msg_prettyxml_FAIL="Install pretty-xml... FAILED"
# uninstall
msg_uninstall_OK="Uninstallation... OK"
msg_uninstall_FAIL="Uninstallation... FAILED"
}

#######################################
# Check and decide which language use
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
set_localization(){
case $LANG in
  # Hungarian localization 
  hu_HU|hu_HU.UTF-8) localization_hu ;;
  # English localization
  *) localization_en ;;
esac
}

#######################################
# Initialize variables and localization
# Globals:
#   LOG_FILE
#   GREP
#   EPUBCHECK_URL
#   EPUBCHECK_DOWNLOAD
#   KINDLEGEN_URL
#   YUICOMPRESSOR_URL
#   YUICOMPRESSOR_DOWNLOAD
#   TOGLOBAL
#   VERBOSE
# Arguments:
#   None
# Returns:
#   None
#######################################
initialize_variables() {
# Files
KINDLEGEN_FILE=kindlegen_linux_2.6_i386_v2_9.tar.gz

# URLs
GREP='browser_.*\.zip'
EPUBCHECK_URL=https://api.github.com/repos/IDPF/epubcheck/releases/latest
KINDLEGEN_URL=http://kindlegen.s3.amazonaws.com/$KINDLEGEN_FILE
YUICOMPRESSOR_URL=https://api.github.com/repos/yui/yuicompressor/releases/latest

# Functions
INSTALL=true
VERBOSE=false
}

#######################################
# Check parameters and running non-module methods
# Globals:
#   TOGLOBAL
# Arguments:
#   Switches of the script
# Returns:
#   None
#######################################
check_parameters() {
case $# in
  0) ;;
  1) 
    case ${1,,} in		
    -h|--help) help ;;
    -l|--license) license_information ;;
    -u|--uninstall) INSTALL=false ;;
    -v|--verbose) VERBOSE=true ;;
    --version) version_information ;;
    *) echo -e $msg_InvalidParameter; exit 1 ;;
    esac
  ;;
  2)
    for var in "$@" ; do
    case ${var,,} in
    -u|--uninstall) INSTALL=false ;;
    -v|--verbose) VERBOSE=true ;;
    *) echo -e $msg_InvalidParameter; exit 1 ;;
    esac
    done
  ;;
  *) echo -e $msg_InvalidParameter; exit 1 ;;
esac
}

#######################################
# Usage of script
# Globals:
#   msg_Help
# Arguments:
#   None
# Returns:
#   None
#######################################
help() {
echo -e $msg_Help
exit 0
}

#######################################
# Displaying license information
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
# License information
license_information() {
sed -n 3,25p $0 | sed 's/# //g' | sed 's/#//g'
exit 0
}

#######################################
# Displaying version information
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
version_information() {
sed -n 27,28p $0 | sed 's/# //g'
exit 0
}

#######################################
# Write to log file
# Globals:
#   None
# Arguments:
#   message to log
# Returns:
#   None
#######################################
# Write log file
log() {
local priority="user.notice"

if [ $# -gt 1 ]; then
  case ${1,,} in
    emerg|emergency) priority="user.emerg" ; shift ;;
    alert) priority="user.alert" ; shift ;;
    crit|critical) priority="user.crit" ; shift ;;
    err|error) priority="user.err" ; shift ;;
    warning|warn) priority="user.warning" ; shift ;;
    notice) priority="user.notice" ; shift ;;
    info) priority="user.info" ; shift ;;
    debug) priority="user.debug" ; shift ;;
  esac
fi

if $VERBOSE ; then
  logger -s -t $(basename $0) -p $priority "$@";
else
  logger -t $(basename $0) -p $priority "$@";
fi
}

#######################################
# Simple choice question
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   true if user choose YES
#   false if user choose NO
#   OR default answer
#######################################
confirm() {
# http://djm.me/ask
while true; do
	if [ "${2:-}" = "Y" ]; then
		prompt="Y/n"
		default=Y
	elif [ "${2:-}" = "N" ]; then
		prompt="y/N"
		default=N
	else
		prompt="y/n"
		default=
	fi
	# Ask the question (not using "read -p" as it uses stderr not stdout)
	echo -n $1 [$prompt] 

	# Read the answer 
  # (use /dev/tty in case stdin is redirected from somewhere else)
	read REPLY </dev/tty

	# Default?
	if [ -z "$REPLY" ]; then
		REPLY=$default
	fi

	# Check if the reply is valid
	case "$REPLY" in
		[yY][eE][sS]|[yY]) return 0 ;;
		[nN][oO]|[nN]) return 1 ;;
	esac

done
}

#######################################
# Stripping first directory from zip-archive (similar to tar -strip 1, but 
# missing feature in zip package)
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
unzip-strip() {
    local zip=$1
    local dest=${2:-.}
    local temp=$(mktemp -d) && unzip -d "$temp" "$zip" && mkdir -p "$dest" &&
    shopt -s dotglob && local f=("$temp"/*) &&
    if (( ${#f[@]} == 1 )) && [[ -d "${f[0]}" ]] ; then
        mv "$temp"/*/* "$dest"
    else
        mv "$temp"/* "$dest"
    fi && rmdir "$temp"/* "$temp"
}

#######################################
# Check dependencies and if not installed, installing them
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
check_dependencies(){
local pkgs="";
command -v wget > /dev/null || pkgs="wget "
command -v curl > /dev/null || pkgs=$pkgs"curl "
command -v nodejs > /dev/null || pkgs=$pkgs"nodejs "
command -v npm > /dev/null || pkgs=$pkgs"npm "
command -v java > /dev/null || pkgs=$pkgs"default-jre "

[[ -n $pkgs ]] && apt-get install --yes  $pkgs 2>&1 | log
command -v nodejs > /dev/null || ln -s /usr/bin/nodejs /usr/bin/node 2>&1 | log
}

#######################################
# Install EpubCheck from repo or the upstream version
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
install_epubcheck() {
local result=false;
local installpath="/opt/epubcheck";

$VERBOSE || echo -n $msg_epubcheck && log $msg_epubcheck

if confirm "$msg_install_epubcheck_Confirm" N ; then
	apt-get install epubcheck 2>&1 | log \
	&& result=true
else
  EPUBCHECK_DOWNLOAD=$(curl -s $EPUBCHECK_URL | grep $GREP | cut -d\" -f4)	
	if [[ -e $installpath ]] ; then rm -rf $installpath 2>&1 | log ; fi
	wget $EPUBCHECK_DOWNLOAD 2>&1 | log \
	&& unzip-strip epubcheck*.zip $installpath 2>&1 | log \
	&& rm epubcheck*.zip 2>&1 | log \
	&& result=true
fi
$result \
&& { $VERBOSE || echo $msg_OK && log $msg_epubcheck$msg_OK ; } \
|| { $VERBOSE || echo $msg_FAIL && log $msg_epubcheck$msg_FAIL ; }
 


}

#######################################
# Download and install kindlegen
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
install_kindlegen(){
local installpath="/opt/kindlegen";
wget $KINDLEGEN_URL 2>&1 | log \
&& if [[ -e $installpath ]] ; then rm -rf $installpath 2>&1 | log ; fi
mkdir $installpath 2>&1 | log \
&& tar -xvf $KINDLEGEN_FILE -C $installpath 2>&1 | log \
&& rm $KINDLEGEN_FILE 2>&1 | log \
&& return 0 || return 1
}

#######################################
# Download and install yuicompressor
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
install_yuicompressor() {
local installpath="/opt/yuicompressor"
YUICOMPRESSOR_DOWNLOAD=$(curl -s $YUICOMPRESSOR_URL | grep $GREP | cut -d\" -f4)
wget $YUICOMPRESSOR_DOWNLOAD 2>&1 | log \
&& if [[ -e $installpath ]] ; then rm -rf $installpath 2>&1 | log ; fi
unzip yuicompressor*.zip -d $installpath 2>&1 | log \
&& mv $installpath/yuicompressor*.jar $installpath/yuicompressor.jar \
&& rm yuicompressor*.zip 2>&1 | log \
&& return 0 || return 1
}

#######################################
# Download and install pretty-xml
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
install_prettyxml() {
npm install -g pretty-xml 2>&1 | log \
&& return 0 || return 1
}

uninstall() {
npm uninstall -g pretty-xml 2>&1 | log \
&& apt-get purge curl nodejs npm 2>&1 | log \
&& apt-get autoremove 2>&1 | log \
&& rm -rf /opt/epubcheck/ /opt/kindlegen/ /opt/yuicompressor/ 2>&1 | log \
&& return 0 || return 1
}

msg(){
$VERBOSE || echo -n $@ | log
}

test_log(){
#$VERBOSE || echo -n "Test..." && log "Test..."
msg "Test..."
local result=false
$result && msg "OK" || msg "FAIL"
#&& { $VERBOSE || echo "OK" && log "TEST... OK" ; } \
#|| { $VERBOSE || echo "FAIL" && log "TEST... FAIL" ; }
exit 0
}
#######################################
# Main function of script
# Globals:
#   EUID
#   LOG_FILE
# Arguments:
#   Switches of the script
# Returns:
#   None
#######################################
set_localization
initialize_variables
check_parameters $@
check_dependencies

# Check run as root	
if [[ $EUID -ne 0 ]]; then
	echo -e $msg_RunAsRoot
	help
	exit 1
fi
test_log
#Run modules
if $INSTALL ; then
$VERBOSE || echo -n $msg_epubcheck && log $msg_epubcheck \
&& install_epubcheck


  install_epubcheck && log $msg_epubcheck_OK || log $msg_epubcheck_FAIL
  install_kindlegen && log $msg_kindlegen_OK || log $msg_kindlegen_FAIL
  install_yuicompressor && log $msg_yuicompressor_OK || log $msg_yuicompressor_FAIL
  install_prettyxml && log $msg_prettyxml_OK || log $msg_prettyxml_FAIL
else
  uninstall && log $msg_uninstall_OK || log $msg_uninstall_FAIL
fi
